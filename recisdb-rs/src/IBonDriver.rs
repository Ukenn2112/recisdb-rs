#![allow(non_snake_case, non_camel_case_types, unused_allocation, dead_code)]

pub mod error;

/* automatically generated by rust-bindgen 0.59.1 */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint32_t = ::std::os::raw::c_uint;
#[doc = " IBonDriver インターフェース"]
#[repr(C)]
#[derive(Debug)]
pub struct IBonDriver {
    pub _address: u8,
}
pub type IBonDriver_BOOL = ::std::os::raw::c_int;
pub type IBonDriver_BYTE = u8;
pub type IBonDriver_DWORD = u32;
#[test]
fn bindgen_test_layout_IBonDriver() {
    assert_eq!(
        ::std::mem::size_of::<IBonDriver>(),
        1usize,
        concat!("Size of: ", stringify!(IBonDriver))
    );
    assert_eq!(
        ::std::mem::align_of::<IBonDriver>(),
        1usize,
        concat!("Alignment of ", stringify!(IBonDriver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver9OpenTunerEv"]
    pub fn IBonDriver_OpenTuner(this: *mut IBonDriver) -> IBonDriver_BOOL;
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver10CloseTunerEv"]
    pub fn IBonDriver_CloseTuner(this: *mut IBonDriver);
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver10SetChannelEh"]
    pub fn IBonDriver_SetChannel(this: *mut IBonDriver, bCh: IBonDriver_BYTE) -> IBonDriver_BOOL;
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver14GetSignalLevelEv"]
    pub fn IBonDriver_GetSignalLevel(this: *mut IBonDriver) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver12WaitTsStreamEj"]
    pub fn IBonDriver_WaitTsStream(
        this: *mut IBonDriver,
        dwTimeOut: IBonDriver_DWORD,
    ) -> IBonDriver_DWORD;
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver13GetReadyCountEv"]
    pub fn IBonDriver_GetReadyCount(this: *mut IBonDriver) -> IBonDriver_DWORD;
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver11GetTsStreamEPhPjS1_"]
    pub fn IBonDriver_GetTsStream(
        this: *mut IBonDriver,
        pDst: *mut IBonDriver_BYTE,
        pdwSize: *mut IBonDriver_DWORD,
        pdwRemain: *mut IBonDriver_DWORD,
    ) -> IBonDriver_BOOL;
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver11GetTsStreamEPPhPjS2_"]
    pub fn IBonDriver_GetTsStream1(
        this: *mut IBonDriver,
        ppDst: *mut *mut IBonDriver_BYTE,
        pdwSize: *mut IBonDriver_DWORD,
        pdwRemain: *mut IBonDriver_DWORD,
    ) -> IBonDriver_BOOL;
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver13PurgeTsStreamEv"]
    pub fn IBonDriver_PurgeTsStream(this: *mut IBonDriver);
}
extern "C" {
    #[link_name = "\u{1}_ZN10IBonDriver7ReleaseEv"]
    pub fn IBonDriver_Release(this: *mut IBonDriver);
}
impl IBonDriver {
    #[inline]
    pub unsafe fn OpenTuner(&mut self) -> IBonDriver_BOOL {
        IBonDriver_OpenTuner(self)
    }
    #[inline]
    pub unsafe fn CloseTuner(&mut self) {
        IBonDriver_CloseTuner(self)
    }
    #[inline]
    pub unsafe fn SetChannel(&mut self, bCh: IBonDriver_BYTE) -> IBonDriver_BOOL {
        IBonDriver_SetChannel(self, bCh)
    }
    #[inline]
    pub unsafe fn GetSignalLevel(&mut self) -> f32 {
        IBonDriver_GetSignalLevel(self)
    }
    #[inline]
    pub unsafe fn WaitTsStream(&mut self, dwTimeOut: IBonDriver_DWORD) -> IBonDriver_DWORD {
        IBonDriver_WaitTsStream(self, dwTimeOut)
    }
    #[inline]
    pub unsafe fn GetReadyCount(&mut self) -> IBonDriver_DWORD {
        IBonDriver_GetReadyCount(self)
    }
    #[inline]
    pub unsafe fn GetTsStream(
        &mut self,
        pDst: *mut IBonDriver_BYTE,
        pdwSize: *mut IBonDriver_DWORD,
        pdwRemain: *mut IBonDriver_DWORD,
    ) -> IBonDriver_BOOL {
        IBonDriver_GetTsStream(self, pDst, pdwSize, pdwRemain)
    }
    #[inline]
    pub unsafe fn GetTsStream1(
        &mut self,
        ppDst: *mut *mut IBonDriver_BYTE,
        pdwSize: *mut IBonDriver_DWORD,
        pdwRemain: *mut IBonDriver_DWORD,
    ) -> IBonDriver_BOOL {
        IBonDriver_GetTsStream1(self, ppDst, pdwSize, pdwRemain)
    }
    #[inline]
    pub unsafe fn PurgeTsStream(&mut self) {
        IBonDriver_PurgeTsStream(self)
    }
    #[inline]
    pub unsafe fn Release(&mut self) {
        IBonDriver_Release(self)
    }
}
#[doc = " IBonDriver2 インターフェース"]
#[repr(C)]
#[derive(Debug)]
pub struct IBonDriver2 {
    pub _address: u8,
}
pub type IBonDriver2_CharType = u16;
pub type IBonDriver2_LPCTSTR = *const IBonDriver2_CharType;
#[test]
fn bindgen_test_layout_IBonDriver2() {
    assert_eq!(
        ::std::mem::size_of::<IBonDriver2>(),
        1usize,
        concat!("Size of: ", stringify!(IBonDriver2))
    );
    assert_eq!(
        ::std::mem::align_of::<IBonDriver2>(),
        1usize,
        concat!("Alignment of ", stringify!(IBonDriver2))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver212GetTunerNameEv"]
    pub fn IBonDriver2_GetTunerName(this: *mut IBonDriver2) -> IBonDriver2_LPCTSTR;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver214IsTunerOpeningEv"]
    pub fn IBonDriver2_IsTunerOpening(this: *mut IBonDriver2) -> IBonDriver_BOOL;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver215EnumTuningSpaceEj"]
    pub fn IBonDriver2_EnumTuningSpace(
        this: *mut IBonDriver2,
        dwSpace: IBonDriver_DWORD,
    ) -> IBonDriver2_LPCTSTR;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver215EnumChannelNameEjj"]
    pub fn IBonDriver2_EnumChannelName(
        this: *mut IBonDriver2,
        dwSpace: IBonDriver_DWORD,
        dwChannel: IBonDriver_DWORD,
    ) -> IBonDriver2_LPCTSTR;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver210SetChannelEjj"]
    pub fn IBonDriver2_SetChannel(
        this: *mut IBonDriver2,
        dwSpace: IBonDriver_DWORD,
        dwChannel: IBonDriver_DWORD,
    ) -> IBonDriver_BOOL;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver211GetCurSpaceEv"]
    pub fn IBonDriver2_GetCurSpace(this: *mut IBonDriver2) -> IBonDriver_DWORD;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver213GetCurChannelEv"]
    pub fn IBonDriver2_GetCurChannel(this: *mut IBonDriver2) -> IBonDriver_DWORD;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver27ReleaseEv"]
    pub fn IBonDriver2_Release(this: *mut IBonDriver2);
}
impl IBonDriver2 {
    #[inline]
    pub unsafe fn GetTunerName(&mut self) -> IBonDriver2_LPCTSTR {
        IBonDriver2_GetTunerName(self)
    }
    #[inline]
    pub unsafe fn IsTunerOpening(&mut self) -> IBonDriver_BOOL {
        IBonDriver2_IsTunerOpening(self)
    }
    #[inline]
    pub unsafe fn EnumTuningSpace(&mut self, dwSpace: IBonDriver_DWORD) -> IBonDriver2_LPCTSTR {
        IBonDriver2_EnumTuningSpace(self, dwSpace)
    }
    #[inline]
    pub unsafe fn EnumChannelName(
        &mut self,
        dwSpace: IBonDriver_DWORD,
        dwChannel: IBonDriver_DWORD,
    ) -> IBonDriver2_LPCTSTR {
        IBonDriver2_EnumChannelName(self, dwSpace, dwChannel)
    }
    #[inline]
    pub unsafe fn SetChannel(
        &mut self,
        dwSpace: IBonDriver_DWORD,
        dwChannel: IBonDriver_DWORD,
    ) -> IBonDriver_BOOL {
        IBonDriver2_SetChannel(self, dwSpace, dwChannel)
    }
    #[inline]
    pub unsafe fn GetCurSpace(&mut self) -> IBonDriver_DWORD {
        IBonDriver2_GetCurSpace(self)
    }
    #[inline]
    pub unsafe fn GetCurChannel(&mut self) -> IBonDriver_DWORD {
        IBonDriver2_GetCurChannel(self)
    }
    #[inline]
    pub unsafe fn Release(&mut self) {
        IBonDriver2_Release(self)
    }
}
#[doc = " IBonDriver3 インターフェース"]
#[repr(C)]
#[derive(Debug)]
pub struct IBonDriver3 {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_IBonDriver3() {
    assert_eq!(
        ::std::mem::size_of::<IBonDriver3>(),
        1usize,
        concat!("Size of: ", stringify!(IBonDriver3))
    );
    assert_eq!(
        ::std::mem::align_of::<IBonDriver3>(),
        1usize,
        concat!("Alignment of ", stringify!(IBonDriver3))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver317GetTotalDeviceNumEv"]
    pub fn IBonDriver3_GetTotalDeviceNum(this: *mut IBonDriver3) -> IBonDriver_DWORD;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver318GetActiveDeviceNumEv"]
    pub fn IBonDriver3_GetActiveDeviceNum(this: *mut IBonDriver3) -> IBonDriver_DWORD;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver311SetLnbPowerEi"]
    pub fn IBonDriver3_SetLnbPower(
        this: *mut IBonDriver3,
        bEnable: IBonDriver_BOOL,
    ) -> IBonDriver_BOOL;
}
extern "C" {
    #[link_name = "\u{1}_ZN11IBonDriver37ReleaseEv"]
    pub fn IBonDriver3_Release(this: *mut IBonDriver3);
}
impl IBonDriver3 {
    #[inline]
    pub unsafe fn GetTotalDeviceNum(&mut self) -> IBonDriver_DWORD {
        IBonDriver3_GetTotalDeviceNum(self)
    }
    #[inline]
    pub unsafe fn GetActiveDeviceNum(&mut self) -> IBonDriver_DWORD {
        IBonDriver3_GetActiveDeviceNum(self)
    }
    #[inline]
    pub unsafe fn SetLnbPower(&mut self, bEnable: IBonDriver_BOOL) -> IBonDriver_BOOL {
        IBonDriver3_SetLnbPower(self, bEnable)
    }
    #[inline]
    pub unsafe fn Release(&mut self) {
        IBonDriver3_Release(self)
    }
}
extern crate libloading;
extern crate cpp_utils;

use std::ptr::NonNull;
use self::cpp_utils::{DynamicCast, Ptr, MutPtr};

pub struct BonDriver {
    __library: ::libloading::Library,
    pub CreateBonDriver: unsafe extern "C" fn() -> *mut IBonDriver,
}
impl BonDriver {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let CreateBonDriver = __library.get(b"CreateBonDriver\0").map(|sym| *sym)?;
        Ok(BonDriver {
            __library,
            CreateBonDriver,
        })
    }
    pub fn CreateBonDriver(&self) -> IBon {
        let IBon1 = unsafe {
            let ptr = (self.CreateBonDriver)();
            NonNull::new(ptr).unwrap()
        };

        let (IBon2, IBon3) = unsafe {
            let ptr: MutPtr<IBonDriver> = MutPtr::from_raw(IBon1.as_ptr());
            let IBon2 = ptr.dynamic_cast_mut();
            let IBon3 = IBon2.dynamic_cast_mut();
            (
                NonNull::new(IBon2.as_mut_raw_ptr()),
                NonNull::new(IBon3.as_mut_raw_ptr()),
            )
        };

        IBon{
            0: IBon1,
            1: IBon2,
            2: IBon3
        }
    }
}

extern "C" {
    #[link_name = "\u{1}_Z17interface_check_2PK10IBonDriver"]
    pub fn interface_check_2(i: *const IBonDriver) -> *const IBonDriver2;
}
extern "C" {
    #[link_name = "\u{1}_Z17interface_check_3PK11IBonDriver2"]
    pub fn interface_check_3(i: *const IBonDriver2) -> *const IBonDriver3;
}

impl DynamicCast<IBonDriver2> for IBonDriver
{
    unsafe fn dynamic_cast(ptr: Ptr<Self>) -> Ptr<IBonDriver2> {
        Ptr::from_raw(interface_check_2(ptr.as_raw_ptr()))
    }

    unsafe fn dynamic_cast_mut(ptr: MutPtr<Self>) -> MutPtr<IBonDriver2> {
        MutPtr::from_raw(interface_check_2(ptr.as_raw_ptr()) as *mut IBonDriver2)
    }
}
impl DynamicCast<IBonDriver3> for IBonDriver2
{
    unsafe fn dynamic_cast(ptr: Ptr<Self>) -> Ptr<IBonDriver3> {
        Ptr::from_raw(interface_check_3(ptr.as_raw_ptr()))
    }

    unsafe fn dynamic_cast_mut(ptr: MutPtr<Self>) -> MutPtr<IBonDriver3> {
        MutPtr::from_raw(interface_check_3(ptr.as_raw_ptr()) as *mut IBonDriver3)
    }
}


pub struct IBon(pub(crate) NonNull<IBonDriver>, Option<NonNull<IBonDriver2>>, Option<NonNull<IBonDriver3>>);
impl Drop for IBon
{
    fn drop(&mut self) {
        self.2 = None;
        self.1 = None;
        unsafe {self.0.as_mut().Release()}
    }
}
