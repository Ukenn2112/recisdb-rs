/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]

use crate::bindings::error::BCasCardError;
use log::debug;
use std::io::{Error, ErrorKind};

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _O_BINARY: u32 = 0;
pub const _O_SEQUENTIAL: u32 = 0;
pub const _BYTESWAP_H: u32 = 1;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const ARIB_STD_B25_TS_PROBING_MIN_DATA: u32 = 2879;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct B_CAS_INIT_STATUS {
    pub system_key: [u8; 32usize],
    pub init_cbc: [u8; 8usize],
    pub bcas_card_id: i64,
    pub card_status: i32,
    pub ca_system_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of B_CAS_INIT_STATUS"][::std::mem::size_of::<B_CAS_INIT_STATUS>() - 56usize];
    ["Alignment of B_CAS_INIT_STATUS"][::std::mem::align_of::<B_CAS_INIT_STATUS>() - 8usize];
    ["Offset of field: B_CAS_INIT_STATUS::system_key"]
        [::std::mem::offset_of!(B_CAS_INIT_STATUS, system_key) - 0usize];
    ["Offset of field: B_CAS_INIT_STATUS::init_cbc"]
        [::std::mem::offset_of!(B_CAS_INIT_STATUS, init_cbc) - 32usize];
    ["Offset of field: B_CAS_INIT_STATUS::bcas_card_id"]
        [::std::mem::offset_of!(B_CAS_INIT_STATUS, bcas_card_id) - 40usize];
    ["Offset of field: B_CAS_INIT_STATUS::card_status"]
        [::std::mem::offset_of!(B_CAS_INIT_STATUS, card_status) - 48usize];
    ["Offset of field: B_CAS_INIT_STATUS::ca_system_id"]
        [::std::mem::offset_of!(B_CAS_INIT_STATUS, ca_system_id) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct B_CAS_ID {
    pub data: *mut i64,
    pub count: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of B_CAS_ID"][::std::mem::size_of::<B_CAS_ID>() - 16usize];
    ["Alignment of B_CAS_ID"][::std::mem::align_of::<B_CAS_ID>() - 8usize];
    ["Offset of field: B_CAS_ID::data"][::std::mem::offset_of!(B_CAS_ID, data) - 0usize];
    ["Offset of field: B_CAS_ID::count"][::std::mem::offset_of!(B_CAS_ID, count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct B_CAS_PWR_ON_CTRL {
    pub s_yy: i32,
    pub s_mm: i32,
    pub s_dd: i32,
    pub l_yy: i32,
    pub l_mm: i32,
    pub l_dd: i32,
    pub hold_time: i32,
    pub broadcaster_group_id: i32,
    pub network_id: i32,
    pub transport_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of B_CAS_PWR_ON_CTRL"][::std::mem::size_of::<B_CAS_PWR_ON_CTRL>() - 40usize];
    ["Alignment of B_CAS_PWR_ON_CTRL"][::std::mem::align_of::<B_CAS_PWR_ON_CTRL>() - 4usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::s_yy"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, s_yy) - 0usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::s_mm"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, s_mm) - 4usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::s_dd"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, s_dd) - 8usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::l_yy"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, l_yy) - 12usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::l_mm"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, l_mm) - 16usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::l_dd"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, l_dd) - 20usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::hold_time"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, hold_time) - 24usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::broadcaster_group_id"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, broadcaster_group_id) - 28usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::network_id"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, network_id) - 32usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL::transport_id"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL, transport_id) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct B_CAS_PWR_ON_CTRL_INFO {
    pub data: *mut B_CAS_PWR_ON_CTRL,
    pub count: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of B_CAS_PWR_ON_CTRL_INFO"][::std::mem::size_of::<B_CAS_PWR_ON_CTRL_INFO>() - 16usize];
    ["Alignment of B_CAS_PWR_ON_CTRL_INFO"]
        [::std::mem::align_of::<B_CAS_PWR_ON_CTRL_INFO>() - 8usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL_INFO::data"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL_INFO, data) - 0usize];
    ["Offset of field: B_CAS_PWR_ON_CTRL_INFO::count"]
        [::std::mem::offset_of!(B_CAS_PWR_ON_CTRL_INFO, count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct B_CAS_ECM_RESULT {
    pub scramble_key: [u8; 16usize],
    pub return_code: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of B_CAS_ECM_RESULT"][::std::mem::size_of::<B_CAS_ECM_RESULT>() - 20usize];
    ["Alignment of B_CAS_ECM_RESULT"][::std::mem::align_of::<B_CAS_ECM_RESULT>() - 4usize];
    ["Offset of field: B_CAS_ECM_RESULT::scramble_key"]
        [::std::mem::offset_of!(B_CAS_ECM_RESULT, scramble_key) - 0usize];
    ["Offset of field: B_CAS_ECM_RESULT::return_code"]
        [::std::mem::offset_of!(B_CAS_ECM_RESULT, return_code) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct B_CAS_CARD {
    pub private_data: *mut ::std::os::raw::c_void,
    pub release: ::std::option::Option<unsafe extern "C" fn(bcas: *mut ::std::os::raw::c_void)>,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(bcas: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub get_init_status: ::std::option::Option<
        unsafe extern "C" fn(
            bcas: *mut ::std::os::raw::c_void,
            stat: *mut B_CAS_INIT_STATUS,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(
            bcas: *mut ::std::os::raw::c_void,
            dst: *mut B_CAS_ID,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_pwr_on_ctrl: ::std::option::Option<
        unsafe extern "C" fn(
            bcas: *mut ::std::os::raw::c_void,
            dst: *mut B_CAS_PWR_ON_CTRL_INFO,
        ) -> ::std::os::raw::c_int,
    >,
    pub proc_ecm: ::std::option::Option<
        unsafe extern "C" fn(
            bcas: *mut ::std::os::raw::c_void,
            dst: *mut B_CAS_ECM_RESULT,
            src: *mut u8,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub proc_emm: ::std::option::Option<
        unsafe extern "C" fn(
            bcas: *mut ::std::os::raw::c_void,
            src: *mut u8,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of B_CAS_CARD"][::std::mem::size_of::<B_CAS_CARD>() - 64usize];
    ["Alignment of B_CAS_CARD"][::std::mem::align_of::<B_CAS_CARD>() - 8usize];
    ["Offset of field: B_CAS_CARD::private_data"]
        [::std::mem::offset_of!(B_CAS_CARD, private_data) - 0usize];
    ["Offset of field: B_CAS_CARD::release"][::std::mem::offset_of!(B_CAS_CARD, release) - 8usize];
    ["Offset of field: B_CAS_CARD::init"][::std::mem::offset_of!(B_CAS_CARD, init) - 16usize];
    ["Offset of field: B_CAS_CARD::get_init_status"]
        [::std::mem::offset_of!(B_CAS_CARD, get_init_status) - 24usize];
    ["Offset of field: B_CAS_CARD::get_id"][::std::mem::offset_of!(B_CAS_CARD, get_id) - 32usize];
    ["Offset of field: B_CAS_CARD::get_pwr_on_ctrl"]
        [::std::mem::offset_of!(B_CAS_CARD, get_pwr_on_ctrl) - 40usize];
    ["Offset of field: B_CAS_CARD::proc_ecm"]
        [::std::mem::offset_of!(B_CAS_CARD, proc_ecm) - 48usize];
    ["Offset of field: B_CAS_CARD::proc_emm"]
        [::std::mem::offset_of!(B_CAS_CARD, proc_emm) - 56usize];
};
unsafe extern "C" {
    pub fn create_b_cas_card() -> *mut B_CAS_CARD;
}
unsafe extern "C" {
    pub fn override_card_reader_name_pattern(
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARIB_STD_B25_BUFFER {
    pub data: *mut u8,
    pub size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ARIB_STD_B25_BUFFER"][::std::mem::size_of::<ARIB_STD_B25_BUFFER>() - 16usize];
    ["Alignment of ARIB_STD_B25_BUFFER"][::std::mem::align_of::<ARIB_STD_B25_BUFFER>() - 8usize];
    ["Offset of field: ARIB_STD_B25_BUFFER::data"]
        [::std::mem::offset_of!(ARIB_STD_B25_BUFFER, data) - 0usize];
    ["Offset of field: ARIB_STD_B25_BUFFER::size"]
        [::std::mem::offset_of!(ARIB_STD_B25_BUFFER, size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARIB_STD_B25_PROGRAM_INFO {
    pub program_number: i32,
    pub ecm_unpurchased_count: i32,
    pub last_ecm_error_code: i32,
    pub padding: i32,
    pub total_packet_count: i64,
    pub undecrypted_packet_count: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ARIB_STD_B25_PROGRAM_INFO"]
        [::std::mem::size_of::<ARIB_STD_B25_PROGRAM_INFO>() - 32usize];
    ["Alignment of ARIB_STD_B25_PROGRAM_INFO"]
        [::std::mem::align_of::<ARIB_STD_B25_PROGRAM_INFO>() - 8usize];
    ["Offset of field: ARIB_STD_B25_PROGRAM_INFO::program_number"]
        [::std::mem::offset_of!(ARIB_STD_B25_PROGRAM_INFO, program_number) - 0usize];
    ["Offset of field: ARIB_STD_B25_PROGRAM_INFO::ecm_unpurchased_count"]
        [::std::mem::offset_of!(ARIB_STD_B25_PROGRAM_INFO, ecm_unpurchased_count) - 4usize];
    ["Offset of field: ARIB_STD_B25_PROGRAM_INFO::last_ecm_error_code"]
        [::std::mem::offset_of!(ARIB_STD_B25_PROGRAM_INFO, last_ecm_error_code) - 8usize];
    ["Offset of field: ARIB_STD_B25_PROGRAM_INFO::padding"]
        [::std::mem::offset_of!(ARIB_STD_B25_PROGRAM_INFO, padding) - 12usize];
    ["Offset of field: ARIB_STD_B25_PROGRAM_INFO::total_packet_count"]
        [::std::mem::offset_of!(ARIB_STD_B25_PROGRAM_INFO, total_packet_count) - 16usize];
    ["Offset of field: ARIB_STD_B25_PROGRAM_INFO::undecrypted_packet_count"]
        [::std::mem::offset_of!(ARIB_STD_B25_PROGRAM_INFO, undecrypted_packet_count) - 24usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ARIB_STD_B25 {
    pub private_data: *mut ::std::os::raw::c_void,
    pub release: ::std::option::Option<unsafe extern "C" fn(std_b25: *mut ::std::os::raw::c_void)>,
    pub set_multi2_round: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            round: i32,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_strip: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            strip: i32,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_emm_proc: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            on: i32,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_simd_mode: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            instructin: i32,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_simd_mode:
        ::std::option::Option<unsafe extern "C" fn(std_b25: *mut ::std::os::raw::c_void) -> i32>,
    pub set_b_cas_card: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            bcas: *mut B_CAS_CARD,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_unit_size: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub reset: ::std::option::Option<
        unsafe extern "C" fn(std_b25: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(std_b25: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub put: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            buf: *mut ARIB_STD_B25_BUFFER,
        ) -> ::std::os::raw::c_int,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            buf: *mut ARIB_STD_B25_BUFFER,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_program_count: ::std::option::Option<
        unsafe extern "C" fn(std_b25: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub get_program_info: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            info: *mut ARIB_STD_B25_PROGRAM_INFO,
            idx: i32,
        ) -> ::std::os::raw::c_int,
    >,
    pub withdraw: ::std::option::Option<
        unsafe extern "C" fn(
            std_b25: *mut ::std::os::raw::c_void,
            buf: *mut ARIB_STD_B25_BUFFER,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ARIB_STD_B25"][::std::mem::size_of::<ARIB_STD_B25>() - 128usize];
    ["Alignment of ARIB_STD_B25"][::std::mem::align_of::<ARIB_STD_B25>() - 8usize];
    ["Offset of field: ARIB_STD_B25::private_data"]
        [::std::mem::offset_of!(ARIB_STD_B25, private_data) - 0usize];
    ["Offset of field: ARIB_STD_B25::release"]
        [::std::mem::offset_of!(ARIB_STD_B25, release) - 8usize];
    ["Offset of field: ARIB_STD_B25::set_multi2_round"]
        [::std::mem::offset_of!(ARIB_STD_B25, set_multi2_round) - 16usize];
    ["Offset of field: ARIB_STD_B25::set_strip"]
        [::std::mem::offset_of!(ARIB_STD_B25, set_strip) - 24usize];
    ["Offset of field: ARIB_STD_B25::set_emm_proc"]
        [::std::mem::offset_of!(ARIB_STD_B25, set_emm_proc) - 32usize];
    ["Offset of field: ARIB_STD_B25::set_simd_mode"]
        [::std::mem::offset_of!(ARIB_STD_B25, set_simd_mode) - 40usize];
    ["Offset of field: ARIB_STD_B25::get_simd_mode"]
        [::std::mem::offset_of!(ARIB_STD_B25, get_simd_mode) - 48usize];
    ["Offset of field: ARIB_STD_B25::set_b_cas_card"]
        [::std::mem::offset_of!(ARIB_STD_B25, set_b_cas_card) - 56usize];
    ["Offset of field: ARIB_STD_B25::set_unit_size"]
        [::std::mem::offset_of!(ARIB_STD_B25, set_unit_size) - 64usize];
    ["Offset of field: ARIB_STD_B25::reset"][::std::mem::offset_of!(ARIB_STD_B25, reset) - 72usize];
    ["Offset of field: ARIB_STD_B25::flush"][::std::mem::offset_of!(ARIB_STD_B25, flush) - 80usize];
    ["Offset of field: ARIB_STD_B25::put"][::std::mem::offset_of!(ARIB_STD_B25, put) - 88usize];
    ["Offset of field: ARIB_STD_B25::get"][::std::mem::offset_of!(ARIB_STD_B25, get) - 96usize];
    ["Offset of field: ARIB_STD_B25::get_program_count"]
        [::std::mem::offset_of!(ARIB_STD_B25, get_program_count) - 104usize];
    ["Offset of field: ARIB_STD_B25::get_program_info"]
        [::std::mem::offset_of!(ARIB_STD_B25, get_program_info) - 112usize];
    ["Offset of field: ARIB_STD_B25::withdraw"]
        [::std::mem::offset_of!(ARIB_STD_B25, withdraw) - 120usize];
};
unsafe extern "C" {
    pub fn create_arib_std_b25() -> *mut ARIB_STD_B25;
}

impl B_CAS_CARD {
    pub fn initialize(&mut self) -> Result<(), Error> {
        let init = self.init;
        let errno =
            unsafe { init.unwrap()(self as *mut B_CAS_CARD as *mut ::std::os::raw::c_void) };

        if errno != 0 {
            Err(Error::new(ErrorKind::Other, BCasCardError::from(errno)))
        } else {
            Ok(())
        }
    }
}

impl Drop for B_CAS_CARD {
    fn drop(&mut self) {
        debug!("Releasing B_CAS_CARD resources...");
        unsafe { self.release.unwrap()(self as *mut B_CAS_CARD as *mut ::std::os::raw::c_void) }
    }
}

impl ARIB_STD_B25 {
    pub fn release(&mut self) {
        unsafe {
            if self.release.is_some() {
                self.release.unwrap()(self as *mut _ as *mut ::std::os::raw::c_void);
            }
        }
    }
    pub fn set_multi2_round(&self, round: i32) -> ::std::os::raw::c_int {
        unsafe {
            match self.set_multi2_round {
                Some(f) => f(self as *const _ as *mut ::std::os::raw::c_void, round),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn set_strip(&self, strip: i32) -> ::std::os::raw::c_int {
        unsafe {
            match self.set_strip {
                Some(f) => f(self as *const _ as *mut ::std::os::raw::c_void, strip),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn set_emm_proc(&self, on: i32) -> ::std::os::raw::c_int {
        unsafe {
            match self.set_emm_proc {
                Some(f) => f(self as *const _ as *mut ::std::os::raw::c_void, on),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn set_simd_mode(&self, instruction_type: i32) -> ::std::os::raw::c_int {
        unsafe {
            match self.set_simd_mode {
                Some(f) => f(
                    self as *const _ as *mut ::std::os::raw::c_void,
                    instruction_type,
                ),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn get_simd_mode(&self) -> i32 {
        unsafe {
            match self.get_simd_mode {
                Some(f) => f(self as *const _ as *mut ::std::os::raw::c_void),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn set_b_cas_card(&self, bcas: &B_CAS_CARD) -> ::std::os::raw::c_int {
        unsafe {
            match self.set_b_cas_card {
                Some(f) => f(
                    self as *const _ as *mut ::std::os::raw::c_void,
                    bcas as *const _ as *mut _,
                ),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn set_unit_size(&self, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        unsafe {
            match self.set_unit_size {
                Some(f) => f(self as *const _ as *mut ::std::os::raw::c_void, size),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn reset(&self) -> ::std::os::raw::c_int {
        unsafe {
            match self.reset {
                Some(f) => f(self as *const _ as *mut ::std::os::raw::c_void),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn flush(&self) -> ::std::os::raw::c_int {
        unsafe {
            match self.flush {
                Some(f) => f(self as *const _ as *mut ::std::os::raw::c_void),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn put(&self, buf: &ARIB_STD_B25_BUFFER) -> ::std::os::raw::c_int {
        unsafe {
            match self.put {
                Some(f) => f(
                    self as *const _ as *mut ::std::os::raw::c_void,
                    buf as *const _ as *mut _,
                ),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn get(&self, buf: &mut ARIB_STD_B25_BUFFER) -> ::std::os::raw::c_int {
        unsafe {
            match self.get {
                Some(f) => f(
                    self as *const _ as *mut ::std::os::raw::c_void,
                    buf as *mut _,
                ),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn get_program_count(&self) -> i32 {
        unsafe {
            match self.get_program_count {
                Some(f) => f(self as *const _ as *mut ::std::os::raw::c_void),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn get_program_info(&self, info: &mut ARIB_STD_B25_PROGRAM_INFO, idx: i32) -> i32 {
        unsafe {
            match self.get_program_info {
                Some(f) => f(
                    self as *const _ as *mut ::std::os::raw::c_void,
                    info as *mut _,
                    idx,
                ),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
    pub fn withdraw(&self, buf: &mut ARIB_STD_B25_BUFFER) -> i32 {
        unsafe {
            match self.withdraw {
                Some(f) => f(
                    self as *const _ as *mut ::std::os::raw::c_void,
                    buf as *mut _,
                ),
                None => unreachable!("Maybe uninitialized"),
            }
        }
    }
}
