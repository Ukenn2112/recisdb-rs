name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
jobs:
  release_deb_executable:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64v8
    container: ${{ matrix.arch }}/rust:slim
    steps:
      - name: Install PCSC, git, build-essential, cmake, wget, clang, pkg-config
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt update
          apt install build-essential cmake libpcsclite-dev git wget clang pkg-config -qy
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          override: true
      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: This release is created by GitHub Actions.
          draft: false
          prerelease: false
      - name: Create deb packages
        run: |
          cargo deb -p recisdb --verbose --output /artifacts/
          cp ./target/release/recisdb /artifacts/recisdb_${{ github.ref }}_${{ matrix.arch }}
      - name: Upload deb package to release channel
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /artifacts/*
          asset_content_type: application/octet-stream
  release_windows_exe:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
    steps:
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          override: true
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - uses: fbactions/setup-winsdk@v1
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Build
        run: cargo build --workspace --verbose --release --all --all-features --target ${{ matrix.arch }}
      - name: Upload exe to release channel
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/*.exe
          asset_content_type: application/octet-stream
